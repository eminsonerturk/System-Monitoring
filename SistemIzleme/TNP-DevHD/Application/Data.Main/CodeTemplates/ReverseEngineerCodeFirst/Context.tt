<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>

using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using Data.Main.Models.Mapping;
using Domain.Main.MdModule.Models;
using Rota2.DataCore;

namespace Data.Main.Models
{
    public partial class BoxDbContext : REfUnitOfWork
    {
        static BoxDbContext()
        {
            Database.SetInitializer<<#= efHost.EntityContainer.Name #>>(null);
        }

        public BoxDbContext()
            : base("Name=<#= efHost.EntityContainer.Name #>")
        {
        }

<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
		var className=GetCamelCaseName(set.ElementType.Name);
		var setName=GetCamelCaseName(set.Name);
#>		
        public DbSet<<#= className #>> <#= setName #> { get; set; }
<#
    }
#>

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
			var className=GetCamelCaseName(set.ElementType.Name);			
#>
            modelBuilder.Configurations.Add(new <#= className #>Map());
<#
    }
#>
        }
    }
}

<#+
string GetCamelCaseName(string input)
{
		string[] words = input.Split('_');
		StringBuilder sb = new StringBuilder();
		foreach (string s in words)
		{
			string firstLetter = s.Substring(0, 1);
			string rest = s.Substring(1, (s.Length - 1));			
			sb.Append(firstLetter.ToUpper() + rest.ToLower(new CultureInfo("en-US", false)));
			sb.Append("");
		}
		return sb.ToString().Replace("ý", "i");
}
#>