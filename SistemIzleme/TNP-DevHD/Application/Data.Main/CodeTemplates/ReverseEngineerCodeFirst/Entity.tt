<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Collections.Generic;
using System.Globalization;
using Rota2.DomainCore;

<# var className=GetCamelCaseName(efHost.EntityType.Name); #>

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{

    public partial class <#= className #> : REntity
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= className #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
		var navClassName=GetCamelCaseName(code.Escape(navProperty)); 
#>
            this.<#= navClassName #> = new List<<#= navClassName #>>();
<#
        }
#>
        }

<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
        var typeUsage = code.Escape(property.TypeUsage);
		var propName=GetCamelCaseName(code.Escape(property)); 
		if(propName!="Id" && propName!="CreatedByUserId" && propName!="CreatedDate" 
	&& propName!="UpdatedByUserId" && propName!="UpdatedDate")
	{
        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }
#>
        <#= Accessibility.ForProperty(property) #> <#= typeUsage #> <#= propName #> { get; set; }
<#
}
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
			var propNameColl=GetCamelCaseName(code.Escape(navProperty));
#>
        public virtual ICollection<<#= propNameColl #>> <#= propNameColl #> { get; set; }
<#
        }
        else
        {
			var propName=GetCamelCaseName(code.Escape(navProperty));
#>
        public virtual <#= propName #> <#= propName #> { get; set; }
<#
        }
    }
#>
    }
}

<#+
string GetCamelCaseName(string input)
{
		string[] words = input.Split('_');
		StringBuilder sb = new StringBuilder();
		foreach (string s in words)
		{
			string firstLetter = s.Substring(0, 1);
			string rest = s.Substring(1, (s.Length - 1));			
			sb.Append(firstLetter.ToUpper() + rest.ToLower(new CultureInfo("en-US", false)));
			sb.Append("");
		}
		return sb.ToString().Replace("ý", "i");
}
#>