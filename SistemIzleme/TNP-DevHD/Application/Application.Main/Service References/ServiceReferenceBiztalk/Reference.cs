//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Application.Main.ServiceReferenceBiztalk {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IntegrationDetailsTransferMessage", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExploper.Cu" +
        "stomObjects")]
    [System.SerializableAttribute()]
    public partial class IntegrationDetailsTransferMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssemblyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Application.Main.ServiceReferenceBiztalk.OrchestrationDetailsMessage[] OchestrationDetailsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationDescription {
            get {
                return this.ApplicationDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationDescriptionField, value) != true)) {
                    this.ApplicationDescriptionField = value;
                    this.RaisePropertyChanged("ApplicationDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationName {
            get {
                return this.ApplicationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationNameField, value) != true)) {
                    this.ApplicationNameField = value;
                    this.RaisePropertyChanged("ApplicationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssemblyName {
            get {
                return this.AssemblyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNameField, value) != true)) {
                    this.AssemblyNameField = value;
                    this.RaisePropertyChanged("AssemblyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Application.Main.ServiceReferenceBiztalk.OrchestrationDetailsMessage[] OchestrationDetails {
            get {
                return this.OchestrationDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.OchestrationDetailsField, value) != true)) {
                    this.OchestrationDetailsField = value;
                    this.RaisePropertyChanged("OchestrationDetails");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrchestrationDetailsMessage", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExploper.Cu" +
        "stomObjects")]
    [System.SerializableAttribute()]
    public partial class OrchestrationDetailsMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DesciptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HostTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Application.Main.ServiceReferenceBiztalk.PortDetailsMessage[] PortDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Desciption {
            get {
                return this.DesciptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DesciptionField, value) != true)) {
                    this.DesciptionField = value;
                    this.RaisePropertyChanged("Desciption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostName {
            get {
                return this.HostNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostNameField, value) != true)) {
                    this.HostNameField = value;
                    this.RaisePropertyChanged("HostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HostTypeId {
            get {
                return this.HostTypeIdField;
            }
            set {
                if ((this.HostTypeIdField.Equals(value) != true)) {
                    this.HostTypeIdField = value;
                    this.RaisePropertyChanged("HostTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostTypeName {
            get {
                return this.HostTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostTypeNameField, value) != true)) {
                    this.HostTypeNameField = value;
                    this.RaisePropertyChanged("HostTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Application.Main.ServiceReferenceBiztalk.PortDetailsMessage[] PortDetails {
            get {
                return this.PortDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.PortDetailsField, value) != true)) {
                    this.PortDetailsField = value;
                    this.RaisePropertyChanged("PortDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortDetailsMessage", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExploper.Cu" +
        "stomObjects")]
    [System.SerializableAttribute()]
    public partial class PortDetailsMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogicalPortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogicalPortTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Application.Main.ServiceReferenceBiztalk.ReceiveLocationsMessage[] ReceiveLocationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrasportTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogicalPortName {
            get {
                return this.LogicalPortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LogicalPortNameField, value) != true)) {
                    this.LogicalPortNameField = value;
                    this.RaisePropertyChanged("LogicalPortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogicalPortType {
            get {
                return this.LogicalPortTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.LogicalPortTypeField, value) != true)) {
                    this.LogicalPortTypeField = value;
                    this.RaisePropertyChanged("LogicalPortType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Application.Main.ServiceReferenceBiztalk.ReceiveLocationsMessage[] ReceiveLocations {
            get {
                return this.ReceiveLocationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiveLocationsField, value) != true)) {
                    this.ReceiveLocationsField = value;
                    this.RaisePropertyChanged("ReceiveLocations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrasportType {
            get {
                return this.TrasportTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TrasportTypeField, value) != true)) {
                    this.TrasportTypeField = value;
                    this.RaisePropertyChanged("TrasportType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReceiveLocationsMessage", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExploper.Cu" +
        "stomObjects")]
    [System.SerializableAttribute()]
    public partial class ReceiveLocationsMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrasportTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrasportType {
            get {
                return this.TrasportTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TrasportTypeField, value) != true)) {
                    this.TrasportTypeField = value;
                    this.RaisePropertyChanged("TrasportType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HostInstancesTransferMessage", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExploper.Cu" +
        "stomObjects")]
    [System.SerializableAttribute()]
    public partial class HostInstancesTransferMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HostInstanceStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostInstanceStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunningServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniqueIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetails {
            get {
                return this.ErrorDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailsField, value) != true)) {
                    this.ErrorDetailsField = value;
                    this.RaisePropertyChanged("ErrorDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HostInstanceStatusId {
            get {
                return this.HostInstanceStatusIdField;
            }
            set {
                if ((this.HostInstanceStatusIdField.Equals(value) != true)) {
                    this.HostInstanceStatusIdField = value;
                    this.RaisePropertyChanged("HostInstanceStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostInstanceStatusName {
            get {
                return this.HostInstanceStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostInstanceStatusNameField, value) != true)) {
                    this.HostInstanceStatusNameField = value;
                    this.RaisePropertyChanged("HostInstanceStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostName {
            get {
                return this.HostNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostNameField, value) != true)) {
                    this.HostNameField = value;
                    this.RaisePropertyChanged("HostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunningServer {
            get {
                return this.RunningServerField;
            }
            set {
                if ((object.ReferenceEquals(this.RunningServerField, value) != true)) {
                    this.RunningServerField = value;
                    this.RaisePropertyChanged("RunningServer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueId {
            get {
                return this.UniqueIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqueIdField, value) != true)) {
                    this.UniqueIdField = value;
                    this.RaisePropertyChanged("UniqueId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReceiveLocationsTransferMessage", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExploper.Cu" +
        "stomObjects")]
    [System.SerializableAttribute()]
    public partial class ReceiveLocationsTransferMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdapterNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AssemblyNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDisabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiveLocationDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiveLocationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiveLocationStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceivePortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string URLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdapterName {
            get {
                return this.AdapterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdapterNameField, value) != true)) {
                    this.AdapterNameField = value;
                    this.RaisePropertyChanged("AdapterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationName {
            get {
                return this.ApplicationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationNameField, value) != true)) {
                    this.ApplicationNameField = value;
                    this.RaisePropertyChanged("ApplicationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AssemblyNames {
            get {
                return this.AssemblyNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNamesField, value) != true)) {
                    this.AssemblyNamesField = value;
                    this.RaisePropertyChanged("AssemblyNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDisabled {
            get {
                return this.IsDisabledField;
            }
            set {
                if ((this.IsDisabledField.Equals(value) != true)) {
                    this.IsDisabledField = value;
                    this.RaisePropertyChanged("IsDisabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiveLocationDesc {
            get {
                return this.ReceiveLocationDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiveLocationDescField, value) != true)) {
                    this.ReceiveLocationDescField = value;
                    this.RaisePropertyChanged("ReceiveLocationDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiveLocationName {
            get {
                return this.ReceiveLocationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiveLocationNameField, value) != true)) {
                    this.ReceiveLocationNameField = value;
                    this.RaisePropertyChanged("ReceiveLocationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiveLocationStatusName {
            get {
                return this.ReceiveLocationStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiveLocationStatusNameField, value) != true)) {
                    this.ReceiveLocationStatusNameField = value;
                    this.RaisePropertyChanged("ReceiveLocationStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceivePortName {
            get {
                return this.ReceivePortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceivePortNameField, value) != true)) {
                    this.ReceivePortNameField = value;
                    this.RaisePropertyChanged("ReceivePortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SendPortsTransferMessage", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExploper.Cu" +
        "stomObjects")]
    [System.SerializableAttribute()]
    public partial class SendPortsTransferMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AssemblyNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PTTransportTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SendPortDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UriField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationName {
            get {
                return this.ApplicationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationNameField, value) != true)) {
                    this.ApplicationNameField = value;
                    this.RaisePropertyChanged("ApplicationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AssemblyNames {
            get {
                return this.AssemblyNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNamesField, value) != true)) {
                    this.AssemblyNamesField = value;
                    this.RaisePropertyChanged("AssemblyNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Filter {
            get {
                return this.FilterField;
            }
            set {
                if ((object.ReferenceEquals(this.FilterField, value) != true)) {
                    this.FilterField = value;
                    this.RaisePropertyChanged("Filter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PTTransportType {
            get {
                return this.PTTransportTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PTTransportTypeField, value) != true)) {
                    this.PTTransportTypeField = value;
                    this.RaisePropertyChanged("PTTransportType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SendPortDesc {
            get {
                return this.SendPortDescField;
            }
            set {
                if ((object.ReferenceEquals(this.SendPortDescField, value) != true)) {
                    this.SendPortDescField = value;
                    this.RaisePropertyChanged("SendPortDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Uri {
            get {
                return this.UriField;
            }
            set {
                if ((object.ReferenceEquals(this.UriField, value) != true)) {
                    this.UriField = value;
                    this.RaisePropertyChanged("Uri");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceInstancesTransferMessage", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExploper.Cu" +
        "stomObjects")]
    [System.SerializableAttribute()]
    public partial class ServiceInstancesTransferMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ActivationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AssemblyNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstanceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Application.Main.ServiceReferenceBiztalk.ServiceInstancesTransferMessage.Messages[] MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceClassIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceClassNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SuspendTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActivationTime {
            get {
                return this.ActivationTimeField;
            }
            set {
                if ((this.ActivationTimeField.Equals(value) != true)) {
                    this.ActivationTimeField = value;
                    this.RaisePropertyChanged("ActivationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AssemblyNames {
            get {
                return this.AssemblyNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNamesField, value) != true)) {
                    this.AssemblyNamesField = value;
                    this.RaisePropertyChanged("AssemblyNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDescription {
            get {
                return this.ErrorDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDescriptionField, value) != true)) {
                    this.ErrorDescriptionField = value;
                    this.RaisePropertyChanged("ErrorDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostName {
            get {
                return this.HostNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostNameField, value) != true)) {
                    this.HostNameField = value;
                    this.RaisePropertyChanged("HostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstanceId {
            get {
                return this.InstanceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.InstanceIdField, value) != true)) {
                    this.InstanceIdField = value;
                    this.RaisePropertyChanged("InstanceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Application.Main.ServiceReferenceBiztalk.ServiceInstancesTransferMessage.Messages[] Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceClassId {
            get {
                return this.ServiceClassIdField;
            }
            set {
                if ((this.ServiceClassIdField.Equals(value) != true)) {
                    this.ServiceClassIdField = value;
                    this.RaisePropertyChanged("ServiceClassId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceClassName {
            get {
                return this.ServiceClassNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceClassNameField, value) != true)) {
                    this.ServiceClassNameField = value;
                    this.RaisePropertyChanged("ServiceClassName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName {
            get {
                return this.ServiceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceNameField, value) != true)) {
                    this.ServiceNameField = value;
                    this.RaisePropertyChanged("ServiceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceStatusId {
            get {
                return this.ServiceStatusIdField;
            }
            set {
                if ((this.ServiceStatusIdField.Equals(value) != true)) {
                    this.ServiceStatusIdField = value;
                    this.RaisePropertyChanged("ServiceStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceStatusName {
            get {
                return this.ServiceStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceStatusNameField, value) != true)) {
                    this.ServiceStatusNameField = value;
                    this.RaisePropertyChanged("ServiceStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SuspendTime {
            get {
                return this.SuspendTimeField;
            }
            set {
                if ((this.SuspendTimeField.Equals(value) != true)) {
                    this.SuspendTimeField = value;
                    this.RaisePropertyChanged("SuspendTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="ServiceInstancesTransferMessage.Messages", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExploper.Cu" +
            "stomObjects")]
        [System.SerializableAttribute()]
        public partial class Messages : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string MessageField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string MessageFileNameField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Message {
                get {
                    return this.MessageField;
                }
                set {
                    if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                        this.MessageField = value;
                        this.RaisePropertyChanged("Message");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string MessageFileName {
                get {
                    return this.MessageFileNameField;
                }
                set {
                    if ((object.ReferenceEquals(this.MessageFileNameField, value) != true)) {
                        this.MessageFileNameField = value;
                        this.RaisePropertyChanged("MessageFileName");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrchestrationsTransferMessage", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExploper.Cu" +
        "stomObjects")]
    [System.SerializableAttribute()]
    public partial class OrchestrationsTransferMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AssemblyNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrchestrationDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationName {
            get {
                return this.ApplicationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationNameField, value) != true)) {
                    this.ApplicationNameField = value;
                    this.RaisePropertyChanged("ApplicationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AssemblyNames {
            get {
                return this.AssemblyNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNamesField, value) != true)) {
                    this.AssemblyNamesField = value;
                    this.RaisePropertyChanged("AssemblyNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostName {
            get {
                return this.HostNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostNameField, value) != true)) {
                    this.HostNameField = value;
                    this.RaisePropertyChanged("HostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrchestrationDesc {
            get {
                return this.OrchestrationDescField;
            }
            set {
                if ((object.ReferenceEquals(this.OrchestrationDescField, value) != true)) {
                    this.OrchestrationDescField = value;
                    this.RaisePropertyChanged("OrchestrationDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReceivePortTransferMessage", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExplorer.Cu" +
        "stomObjects")]
    [System.SerializableAttribute()]
    public partial class ReceivePortTransferMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AssemblyNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTwoWayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceivePortDescField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationName {
            get {
                return this.ApplicationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationNameField, value) != true)) {
                    this.ApplicationNameField = value;
                    this.RaisePropertyChanged("ApplicationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AssemblyNames {
            get {
                return this.AssemblyNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNamesField, value) != true)) {
                    this.AssemblyNamesField = value;
                    this.RaisePropertyChanged("AssemblyNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTwoWay {
            get {
                return this.IsTwoWayField;
            }
            set {
                if ((this.IsTwoWayField.Equals(value) != true)) {
                    this.IsTwoWayField = value;
                    this.RaisePropertyChanged("IsTwoWay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceivePortDesc {
            get {
                return this.ReceivePortDescField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceivePortDescField, value) != true)) {
                    this.ReceivePortDescField = value;
                    this.RaisePropertyChanged("ReceivePortDesc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WindowsServicesTransferMessage", Namespace="http://schemas.datacontract.org/2004/07/Bimar.Integration.LocalMachineExploper.Cu" +
        "stomObjects")]
    [System.SerializableAttribute()]
    public partial class WindowsServicesTransferMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StartedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName {
            get {
                return this.ServiceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceNameField, value) != true)) {
                    this.ServiceNameField = value;
                    this.RaisePropertyChanged("ServiceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Started {
            get {
                return this.StartedField;
            }
            set {
                if ((this.StartedField.Equals(value) != true)) {
                    this.StartedField = value;
                    this.RaisePropertyChanged("Started");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceBiztalk.IBiztalkExplorerService")]
    public interface IBiztalkExplorerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetIntegrationDeploymentDetails", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetIntegrationDeploymentDetailsRespons" +
            "e")]
        Application.Main.ServiceReferenceBiztalk.IntegrationDetailsTransferMessage GetIntegrationDeploymentDetails(string assemblyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetIntegrationDeploymentDetails", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetIntegrationDeploymentDetailsRespons" +
            "e")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.IntegrationDetailsTransferMessage> GetIntegrationDeploymentDetailsAsync(string assemblyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetHostInstances", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetHostInstancesResponse")]
        Application.Main.ServiceReferenceBiztalk.HostInstancesTransferMessage[] GetHostInstances();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetHostInstances", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetHostInstancesResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.HostInstancesTransferMessage[]> GetHostInstancesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/ChangeHostInstanceStatus", ReplyAction="http://tempuri.org/IBiztalkExplorerService/ChangeHostInstanceStatusResponse")]
        string ChangeHostInstanceStatus(string hostInstanceUniqueId, int statusChangeCommandId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/ChangeHostInstanceStatus", ReplyAction="http://tempuri.org/IBiztalkExplorerService/ChangeHostInstanceStatusResponse")]
        System.Threading.Tasks.Task<string> ChangeHostInstanceStatusAsync(string hostInstanceUniqueId, int statusChangeCommandId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetReceiveLocation", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetReceiveLocationResponse")]
        Application.Main.ServiceReferenceBiztalk.ReceiveLocationsTransferMessage GetReceiveLocation(string receiveLocationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetReceiveLocation", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetReceiveLocationResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.ReceiveLocationsTransferMessage> GetReceiveLocationAsync(string receiveLocationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetReceiveLocations", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetReceiveLocationsResponse")]
        Application.Main.ServiceReferenceBiztalk.ReceiveLocationsTransferMessage[] GetReceiveLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetReceiveLocations", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetReceiveLocationsResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.ReceiveLocationsTransferMessage[]> GetReceiveLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/ChangeReceiveLocationStatus", ReplyAction="http://tempuri.org/IBiztalkExplorerService/ChangeReceiveLocationStatusResponse")]
        string ChangeReceiveLocationStatus(string receiveLocationName, bool enable, bool changeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/ChangeReceiveLocationStatus", ReplyAction="http://tempuri.org/IBiztalkExplorerService/ChangeReceiveLocationStatusResponse")]
        System.Threading.Tasks.Task<string> ChangeReceiveLocationStatusAsync(string receiveLocationName, bool enable, bool changeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetSendPort", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetSendPortResponse")]
        Application.Main.ServiceReferenceBiztalk.SendPortsTransferMessage GetSendPort(string sendPortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetSendPort", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetSendPortResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.SendPortsTransferMessage> GetSendPortAsync(string sendPortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetSendPorts", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetSendPortsResponse")]
        Application.Main.ServiceReferenceBiztalk.SendPortsTransferMessage[] GetSendPorts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetSendPorts", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetSendPortsResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.SendPortsTransferMessage[]> GetSendPortsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/ChangeSendPortStatus", ReplyAction="http://tempuri.org/IBiztalkExplorerService/ChangeSendPortStatusResponse")]
        string ChangeSendPortStatus(string sendPortName, int statusChangeCommandId, bool changeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/ChangeSendPortStatus", ReplyAction="http://tempuri.org/IBiztalkExplorerService/ChangeSendPortStatusResponse")]
        System.Threading.Tasks.Task<string> ChangeSendPortStatusAsync(string sendPortName, int statusChangeCommandId, bool changeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetServiceInstances", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetServiceInstancesResponse")]
        Application.Main.ServiceReferenceBiztalk.ServiceInstancesTransferMessage[] GetServiceInstances();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetServiceInstances", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetServiceInstancesResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.ServiceInstancesTransferMessage[]> GetServiceInstancesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/ChangeServiceInstanceStatus", ReplyAction="http://tempuri.org/IBiztalkExplorerService/ChangeServiceInstanceStatusResponse")]
        string ChangeServiceInstanceStatus(string serviceInstanceInstanceIds, int statusChangeCommandId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/ChangeServiceInstanceStatus", ReplyAction="http://tempuri.org/IBiztalkExplorerService/ChangeServiceInstanceStatusResponse")]
        System.Threading.Tasks.Task<string> ChangeServiceInstanceStatusAsync(string serviceInstanceInstanceIds, int statusChangeCommandId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetServiceInstancesFiles", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetServiceInstancesFilesResponse")]
        Application.Main.ServiceReferenceBiztalk.ServiceInstancesTransferMessage[] GetServiceInstancesFiles(string[] serviceInstanceInstanceIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetServiceInstancesFiles", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetServiceInstancesFilesResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.ServiceInstancesTransferMessage[]> GetServiceInstancesFilesAsync(string[] serviceInstanceInstanceIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetOrchestration", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetOrchestrationResponse")]
        Application.Main.ServiceReferenceBiztalk.OrchestrationsTransferMessage GetOrchestration(string orchestrationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetOrchestration", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetOrchestrationResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.OrchestrationsTransferMessage> GetOrchestrationAsync(string orchestrationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetOrchestrations", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetOrchestrationsResponse")]
        Application.Main.ServiceReferenceBiztalk.OrchestrationsTransferMessage[] GetOrchestrations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetOrchestrations", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetOrchestrationsResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.OrchestrationsTransferMessage[]> GetOrchestrationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/ChangeOrchestrationStatus", ReplyAction="http://tempuri.org/IBiztalkExplorerService/ChangeOrchestrationStatusResponse")]
        string ChangeOrchestrationStatus(string orchestrationName, int statusChangeCommandId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/ChangeOrchestrationStatus", ReplyAction="http://tempuri.org/IBiztalkExplorerService/ChangeOrchestrationStatusResponse")]
        System.Threading.Tasks.Task<string> ChangeOrchestrationStatusAsync(string orchestrationName, int statusChangeCommandId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetReceivePorts", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetReceivePortsResponse")]
        Application.Main.ServiceReferenceBiztalk.ReceivePortTransferMessage[] GetReceivePorts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetReceivePorts", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetReceivePortsResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.ReceivePortTransferMessage[]> GetReceivePortsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/StartWindowsServices", ReplyAction="http://tempuri.org/IBiztalkExplorerService/StartWindowsServicesResponse")]
        Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[] StartWindowsServices(string[] serviceNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/StartWindowsServices", ReplyAction="http://tempuri.org/IBiztalkExplorerService/StartWindowsServicesResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[]> StartWindowsServicesAsync(string[] serviceNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/StopWindowsServices", ReplyAction="http://tempuri.org/IBiztalkExplorerService/StopWindowsServicesResponse")]
        Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[] StopWindowsServices(string[] serviceNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/StopWindowsServices", ReplyAction="http://tempuri.org/IBiztalkExplorerService/StopWindowsServicesResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[]> StopWindowsServicesAsync(string[] serviceNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/RestartWindowsServices", ReplyAction="http://tempuri.org/IBiztalkExplorerService/RestartWindowsServicesResponse")]
        Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[] RestartWindowsServices(string[] serviceNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/RestartWindowsServices", ReplyAction="http://tempuri.org/IBiztalkExplorerService/RestartWindowsServicesResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[]> RestartWindowsServicesAsync(string[] serviceNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetWindowsService", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetWindowsServiceResponse")]
        Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage GetWindowsService(string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetWindowsService", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetWindowsServiceResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage> GetWindowsServiceAsync(string serviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetWindowsServices", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetWindowsServicesResponse")]
        Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[] GetWindowsServices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBiztalkExplorerService/GetWindowsServices", ReplyAction="http://tempuri.org/IBiztalkExplorerService/GetWindowsServicesResponse")]
        System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[]> GetWindowsServicesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBiztalkExplorerServiceChannel : Application.Main.ServiceReferenceBiztalk.IBiztalkExplorerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BiztalkExplorerServiceClient : System.ServiceModel.ClientBase<Application.Main.ServiceReferenceBiztalk.IBiztalkExplorerService>, Application.Main.ServiceReferenceBiztalk.IBiztalkExplorerService {
        
        public BiztalkExplorerServiceClient() {
        }
        
        public BiztalkExplorerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BiztalkExplorerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BiztalkExplorerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BiztalkExplorerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Application.Main.ServiceReferenceBiztalk.IntegrationDetailsTransferMessage GetIntegrationDeploymentDetails(string assemblyName) {
            return base.Channel.GetIntegrationDeploymentDetails(assemblyName);
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.IntegrationDetailsTransferMessage> GetIntegrationDeploymentDetailsAsync(string assemblyName) {
            return base.Channel.GetIntegrationDeploymentDetailsAsync(assemblyName);
        }
        
        public Application.Main.ServiceReferenceBiztalk.HostInstancesTransferMessage[] GetHostInstances() {
            return base.Channel.GetHostInstances();
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.HostInstancesTransferMessage[]> GetHostInstancesAsync() {
            return base.Channel.GetHostInstancesAsync();
        }
        
        public string ChangeHostInstanceStatus(string hostInstanceUniqueId, int statusChangeCommandId) {
            return base.Channel.ChangeHostInstanceStatus(hostInstanceUniqueId, statusChangeCommandId);
        }
        
        public System.Threading.Tasks.Task<string> ChangeHostInstanceStatusAsync(string hostInstanceUniqueId, int statusChangeCommandId) {
            return base.Channel.ChangeHostInstanceStatusAsync(hostInstanceUniqueId, statusChangeCommandId);
        }
        
        public Application.Main.ServiceReferenceBiztalk.ReceiveLocationsTransferMessage GetReceiveLocation(string receiveLocationName) {
            return base.Channel.GetReceiveLocation(receiveLocationName);
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.ReceiveLocationsTransferMessage> GetReceiveLocationAsync(string receiveLocationName) {
            return base.Channel.GetReceiveLocationAsync(receiveLocationName);
        }
        
        public Application.Main.ServiceReferenceBiztalk.ReceiveLocationsTransferMessage[] GetReceiveLocations() {
            return base.Channel.GetReceiveLocations();
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.ReceiveLocationsTransferMessage[]> GetReceiveLocationsAsync() {
            return base.Channel.GetReceiveLocationsAsync();
        }
        
        public string ChangeReceiveLocationStatus(string receiveLocationName, bool enable, bool changeName) {
            return base.Channel.ChangeReceiveLocationStatus(receiveLocationName, enable, changeName);
        }
        
        public System.Threading.Tasks.Task<string> ChangeReceiveLocationStatusAsync(string receiveLocationName, bool enable, bool changeName) {
            return base.Channel.ChangeReceiveLocationStatusAsync(receiveLocationName, enable, changeName);
        }
        
        public Application.Main.ServiceReferenceBiztalk.SendPortsTransferMessage GetSendPort(string sendPortName) {
            return base.Channel.GetSendPort(sendPortName);
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.SendPortsTransferMessage> GetSendPortAsync(string sendPortName) {
            return base.Channel.GetSendPortAsync(sendPortName);
        }
        
        public Application.Main.ServiceReferenceBiztalk.SendPortsTransferMessage[] GetSendPorts() {
            return base.Channel.GetSendPorts();
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.SendPortsTransferMessage[]> GetSendPortsAsync() {
            return base.Channel.GetSendPortsAsync();
        }
        
        public string ChangeSendPortStatus(string sendPortName, int statusChangeCommandId, bool changeName) {
            return base.Channel.ChangeSendPortStatus(sendPortName, statusChangeCommandId, changeName);
        }
        
        public System.Threading.Tasks.Task<string> ChangeSendPortStatusAsync(string sendPortName, int statusChangeCommandId, bool changeName) {
            return base.Channel.ChangeSendPortStatusAsync(sendPortName, statusChangeCommandId, changeName);
        }
        
        public Application.Main.ServiceReferenceBiztalk.ServiceInstancesTransferMessage[] GetServiceInstances() {
            return base.Channel.GetServiceInstances();
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.ServiceInstancesTransferMessage[]> GetServiceInstancesAsync() {
            return base.Channel.GetServiceInstancesAsync();
        }
        
        public string ChangeServiceInstanceStatus(string serviceInstanceInstanceIds, int statusChangeCommandId) {
            return base.Channel.ChangeServiceInstanceStatus(serviceInstanceInstanceIds, statusChangeCommandId);
        }
        
        public System.Threading.Tasks.Task<string> ChangeServiceInstanceStatusAsync(string serviceInstanceInstanceIds, int statusChangeCommandId) {
            return base.Channel.ChangeServiceInstanceStatusAsync(serviceInstanceInstanceIds, statusChangeCommandId);
        }
        
        public Application.Main.ServiceReferenceBiztalk.ServiceInstancesTransferMessage[] GetServiceInstancesFiles(string[] serviceInstanceInstanceIds) {
            return base.Channel.GetServiceInstancesFiles(serviceInstanceInstanceIds);
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.ServiceInstancesTransferMessage[]> GetServiceInstancesFilesAsync(string[] serviceInstanceInstanceIds) {
            return base.Channel.GetServiceInstancesFilesAsync(serviceInstanceInstanceIds);
        }
        
        public Application.Main.ServiceReferenceBiztalk.OrchestrationsTransferMessage GetOrchestration(string orchestrationName) {
            return base.Channel.GetOrchestration(orchestrationName);
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.OrchestrationsTransferMessage> GetOrchestrationAsync(string orchestrationName) {
            return base.Channel.GetOrchestrationAsync(orchestrationName);
        }
        
        public Application.Main.ServiceReferenceBiztalk.OrchestrationsTransferMessage[] GetOrchestrations() {
            return base.Channel.GetOrchestrations();
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.OrchestrationsTransferMessage[]> GetOrchestrationsAsync() {
            return base.Channel.GetOrchestrationsAsync();
        }
        
        public string ChangeOrchestrationStatus(string orchestrationName, int statusChangeCommandId) {
            return base.Channel.ChangeOrchestrationStatus(orchestrationName, statusChangeCommandId);
        }
        
        public System.Threading.Tasks.Task<string> ChangeOrchestrationStatusAsync(string orchestrationName, int statusChangeCommandId) {
            return base.Channel.ChangeOrchestrationStatusAsync(orchestrationName, statusChangeCommandId);
        }
        
        public Application.Main.ServiceReferenceBiztalk.ReceivePortTransferMessage[] GetReceivePorts() {
            return base.Channel.GetReceivePorts();
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.ReceivePortTransferMessage[]> GetReceivePortsAsync() {
            return base.Channel.GetReceivePortsAsync();
        }
        
        public Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[] StartWindowsServices(string[] serviceNames) {
            return base.Channel.StartWindowsServices(serviceNames);
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[]> StartWindowsServicesAsync(string[] serviceNames) {
            return base.Channel.StartWindowsServicesAsync(serviceNames);
        }
        
        public Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[] StopWindowsServices(string[] serviceNames) {
            return base.Channel.StopWindowsServices(serviceNames);
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[]> StopWindowsServicesAsync(string[] serviceNames) {
            return base.Channel.StopWindowsServicesAsync(serviceNames);
        }
        
        public Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[] RestartWindowsServices(string[] serviceNames) {
            return base.Channel.RestartWindowsServices(serviceNames);
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[]> RestartWindowsServicesAsync(string[] serviceNames) {
            return base.Channel.RestartWindowsServicesAsync(serviceNames);
        }
        
        public Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage GetWindowsService(string serviceName) {
            return base.Channel.GetWindowsService(serviceName);
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage> GetWindowsServiceAsync(string serviceName) {
            return base.Channel.GetWindowsServiceAsync(serviceName);
        }
        
        public Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[] GetWindowsServices() {
            return base.Channel.GetWindowsServices();
        }
        
        public System.Threading.Tasks.Task<Application.Main.ServiceReferenceBiztalk.WindowsServicesTransferMessage[]> GetWindowsServicesAsync() {
            return base.Channel.GetWindowsServicesAsync();
        }
    }
}
